{"version":3,"sources":["util/api.js","components/searchbar.js","components/header.js","components/table.js","App.js","reportWebVitals.js","index.js"],"names":["getEmployees","a","fetch","data","json","JSON","results","Search","props","className","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","id","Header","Table","visibleEmployees","handleQuery","React","useState","phone","email","dob","AscendingMap","setAscendingMap","handleSortChange","query","scope","onClick","map","employee","idx","src","picture","thumbnail","alt","first","last","Date","date","toLocaleDateString","App","employees","setEmployees","searchQuery","setSearchQuery","useEffect","then","filter","fullName","toLowerCase","includes","e","target","sortAscending","sortedEmployees","slice","sort","b","fullNameA","fullNameB","localeCompare","dobA","getTime","dobB","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5161c0d8.chunk.js","sourcesContent":["export const getEmployees = async () => {\r\n    const data = await fetch(\r\n        'https://randomuser.me/api/?results=200&nat=us')\r\n    const JSON = await data.json()\r\n    return JSON.results;\r\n}","import React from 'react';\r\n\r\nfunction Search(props) {\r\n    return (\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"search\"></label>\r\n          <input\r\n            onChange={props.handleInputChange}\r\n            value={props.search}\r\n            name=\"search\"\r\n            type=\"text\"\r\n            placeholder=\"Search name\"\r\n            id=\"search\"\r\n          />\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n  \r\n  export default Search;","import React from \"react\";\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Employee Directory</h1>\r\n                \r\n          \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Table({ visibleEmployees, handleQuery }) {\r\n    const [AscendingMap, setAscendingMap] = React.useState({ name: true, phone: true, email: true, dob: true })\r\n    const handleSortChange = (query) => {\r\n        handleQuery(query, !AscendingMap[query])\r\n        setAscendingMap({\r\n            ...AscendingMap,\r\n            [query]:!AscendingMap[query]            \r\n        })\r\n\r\n}\r\nreturn (\r\n    <table className=\"table table-striped table-hover table-fluid\">\r\n\r\n        <thead >\r\n            <tr>\r\n                <th scope=\"col\">Image</th>\r\n                <th onClick={() => handleSortChange('name')} scope=\"col\">Name</th>\r\n                <th onClick={() => handleSortChange('phone')} scope=\"col\">Phone</th>\r\n                <th onClick={() => handleSortChange('email')} scope=\"col\">Email</th>\r\n                <th onClick={() => handleSortChange('dob')} scope=\"col\">DOB</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n\r\n            {visibleEmployees.map((employee, idx) => {\r\n                return (<tr key={idx}>\r\n                    <td>\r\n                        <img src={employee.picture.thumbnail} alt='employee thumbnail' ></img>\r\n                    </td>\r\n                    <td> {employee.name.first} {employee.name.last} </td>\r\n                    <td> {employee.phone} </td>\r\n                    <td> {employee.email} </td>\r\n                    <td> {new Date(employee.dob.date).toLocaleDateString()} </td>\r\n                </tr>)\r\n\r\n            })}\r\n\r\n        </tbody>\r\n\r\n    </table>\r\n)\r\n}\r\n\r\n\r\nexport default Table;","import './App.css';\r\nimport React, { useEffect } from 'react';\r\nimport { getEmployees } from './util/api';\r\nimport SearchBar from './components/searchbar'\r\nimport Header from './components/header'\r\nimport Table from './components/table'\r\n\r\nfunction App() {\r\n  const [employees, setEmployees] = React.useState([])\r\n  const [searchQuery, setSearchQuery] = React.useState('')\r\n  const handleQuery = (query, sortAscending) => {\r\n    const sortedEmployees = employees.slice()\r\n    switch (query) {\r\n      case 'name':\r\n        sortedEmployees.sort((a, b) => {\r\n          const fullNameA = `${a.name.first} ${a.name.last}`.toLowerCase()\r\n          const fullNameB = `${b.name.first} ${b.name.last}`.toLowerCase()\r\n          return sortAscending ? fullNameB.localeCompare(fullNameA) : fullNameA.localeCompare(fullNameB)\r\n        })\r\n        break;\r\n      case 'phone':\r\n        sortedEmployees.sort((a, b) => {\r\n          return sortAscending ? b.phone.localeCompare(a.phone) : a.phone.localeCompare(b.phone)\r\n        })\r\n        break;\r\n      case 'email':\r\n        sortedEmployees.sort((a, b) => {\r\n          return sortAscending ? b.email.localeCompare(a.email) : a.email.localeCompare(b.email)\r\n        })\r\n        break;\r\n      case 'dob':\r\n        sortedEmployees.sort((a, b) => {\r\n          const dobA = new Date (a.dob.date).getTime()\r\n          const dobB = new Date (b.dob.date).getTime()\r\n          return sortAscending ? dobB - dobA : dobA - dobB\r\n        })\r\n        break;\r\n    }\r\n\r\n    setEmployees(sortedEmployees)\r\n  }\r\n\r\n  const handleSearchChange = (e) => {\r\n    setSearchQuery(e.target.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getEmployees().then((results) => {\r\n      setEmployees(results)\r\n    })\r\n  }, [])\r\n  const visibleEmployees = employees.filter((employee) => {\r\n    const fullName = `${employee.name.first} ${employee.name.last}`.toLowerCase()\r\n    const query = searchQuery.toLowerCase()\r\n    return fullName.includes(query)\r\n  })\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <SearchBar search={searchQuery} handleInputChange={handleSearchChange} />\r\n      <Table\r\n        visibleEmployees={visibleEmployees}\r\n        handleQuery={handleQuery} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}